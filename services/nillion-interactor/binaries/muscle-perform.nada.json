{"functions":[],"parties":[{"name":"Party1","source_ref_index":10}],"inputs":[{"type":"SecretInteger","party":"Party1","name":"genotype1","doc":"","source_ref_index":4},{"type":"SecretInteger","party":"Party1","name":"snp1","doc":"","source_ref_index":7}],"literals":[{"name":"3","value":"0","type":"Integer"},{"name":"2","value":"1","type":"Integer"},{"name":"1","value":"9","type":"Integer"},{"name":"0","value":"11","type":"Integer"},{"name":"4","value":"2","type":"Integer"}],"outputs":[{"name":"Result","operation_id":28,"party":"Party1","type":"SecretInteger","source_ref_index":9}],"operations":{"1":{"InputReference":{"id":1,"refers_to":"snp1","type":"SecretInteger","source_ref_index":7}},"2":{"InputReference":{"id":2,"refers_to":"genotype1","type":"SecretInteger","source_ref_index":4}},"3":{"LiteralReference":{"id":3,"refers_to":"0","type":"Integer","source_ref_index":8}},"4":{"LiteralReference":{"id":4,"refers_to":"1","type":"Integer","source_ref_index":5}},"5":{"Not":{"id":5,"this":34,"type":"SecretBoolean","source_ref_index":1}},"6":{"Not":{"id":6,"this":33,"type":"SecretBoolean","source_ref_index":1}},"7":{"LiteralReference":{"id":7,"refers_to":"2","type":"Integer","source_ref_index":6}},"8":{"LiteralReference":{"id":8,"refers_to":"3","type":"Integer","source_ref_index":6}},"9":{"IfElse":{"id":9,"this":6,"arg_0":7,"arg_1":8,"type":"SecretInteger","source_ref_index":6}},"10":{"LiteralReference":{"id":10,"refers_to":"3","type":"Integer","source_ref_index":6}},"11":{"IfElse":{"id":11,"this":5,"arg_0":9,"arg_1":10,"type":"SecretInteger","source_ref_index":6}},"12":{"Not":{"id":12,"this":32,"type":"SecretBoolean","source_ref_index":1}},"13":{"Not":{"id":13,"this":31,"type":"SecretBoolean","source_ref_index":1}},"14":{"LiteralReference":{"id":14,"refers_to":"2","type":"Integer","source_ref_index":3}},"15":{"LiteralReference":{"id":15,"refers_to":"3","type":"Integer","source_ref_index":3}},"16":{"IfElse":{"id":16,"this":13,"arg_0":14,"arg_1":15,"type":"SecretInteger","source_ref_index":3}},"17":{"LiteralReference":{"id":17,"refers_to":"3","type":"Integer","source_ref_index":3}},"18":{"IfElse":{"id":18,"this":12,"arg_0":16,"arg_1":17,"type":"SecretInteger","source_ref_index":3}},"19":{"Addition":{"id":19,"left":11,"right":18,"type":"SecretInteger","source_ref_index":2}},"20":{"LiteralReference":{"id":20,"refers_to":"4","type":"Integer","source_ref_index":0}},"21":{"Not":{"id":21,"this":30,"type":"SecretBoolean","source_ref_index":1}},"22":{"LiteralReference":{"id":22,"refers_to":"4","type":"Integer","source_ref_index":0}},"23":{"Not":{"id":23,"this":29,"type":"SecretBoolean","source_ref_index":1}},"24":{"LiteralReference":{"id":24,"refers_to":"2","type":"Integer","source_ref_index":0}},"25":{"LiteralReference":{"id":25,"refers_to":"3","type":"Integer","source_ref_index":0}},"26":{"IfElse":{"id":26,"this":23,"arg_0":24,"arg_1":25,"type":"SecretInteger","source_ref_index":0}},"27":{"LiteralReference":{"id":27,"refers_to":"3","type":"Integer","source_ref_index":0}},"28":{"IfElse":{"id":28,"this":21,"arg_0":26,"arg_1":27,"type":"SecretInteger","source_ref_index":0}},"29":{"LessThan":{"id":29,"left":22,"right":19,"type":"SecretBoolean","source_ref_index":1}},"30":{"LessThan":{"id":30,"left":19,"right":20,"type":"SecretBoolean","source_ref_index":1}},"31":{"LessThan":{"id":31,"left":4,"right":2,"type":"SecretBoolean","source_ref_index":1}},"32":{"LessThan":{"id":32,"left":2,"right":4,"type":"SecretBoolean","source_ref_index":1}},"33":{"LessThan":{"id":33,"left":3,"right":1,"type":"SecretBoolean","source_ref_index":1}},"34":{"LessThan":{"id":34,"left":1,"right":3,"type":"SecretBoolean","source_ref_index":1}}},"source_files":{"muscle-perform.py":"from nada_dsl import *\n\n\n# Checks based on SNP rs1815739 whether someone is a sprinter or an endurance athelete\n# Genotype TT indicates endurance athlete\n# We arbitrarily assume sprinter otherwise\n# This program returns 0 if sprinter, 1 if endurance athelete\ndef nada_main():\n\n    party1 = Party(name=\"Party1\")\n\n\n    snp1 = SecretInteger(Input(name=\"snp1\", party=party1))\n    genotype1 = SecretInteger(Input(name=\"genotype1\", party=party1))\n\n    target_snp_1 = Integer(11)\n    target_genotype_1 = Integer(9)\n\n    eq1 = (snp1 >= target_snp_1).if_else((target_snp_1 >= snp1).if_else(Integer(1), Integer(0)), Integer(0))\n    eq2 = (genotype1 >= target_genotype_1).if_else((target_genotype_1 >= genotype1).if_else(Integer(1), Integer(0)), Integer(0))\n\n\n    total = eq1 + eq2\n\n    is_successful = (total >= Integer(2)).if_else((Integer(2) >= total).if_else(Integer(1), Integer(0)), Integer(0))\n\n    result = is_successful\n\n    return [Output(result, \"Result\", party1)]\n"},"source_refs":[{"file":"muscle-perform.py","lineno":25,"offset":772,"length":116},{"file":"scalar_types.py","lineno":200,"offset":0,"length":0},{"file":"scalar_types.py","lineno":136,"offset":0,"length":0},{"file":"muscle-perform.py","lineno":20,"offset":618,"length":128},{"file":"muscle-perform.py","lineno":14,"offset":372,"length":68},{"file":"muscle-perform.py","lineno":17,"offset":473,"length":34},{"file":"muscle-perform.py","lineno":19,"offset":509,"length":108},{"file":"muscle-perform.py","lineno":13,"offset":313,"length":58},{"file":"muscle-perform.py","lineno":16,"offset":442,"length":30},{"file":"muscle-perform.py","lineno":29,"offset":0,"length":0},{"file":"muscle-perform.py","lineno":10,"offset":277,"length":33}]}